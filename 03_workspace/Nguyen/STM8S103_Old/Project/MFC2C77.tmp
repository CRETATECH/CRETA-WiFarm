#include "stm8s.h"
#include "gpio.h"
#include "timer.h"
#include "i2c.h"
#include "uart.h"
#include "bh1750.h"
#include "sht1x.h"

volatile uint8_t ledStatus = PIN_6|PIN_7;
extern uint8_t gBuffUART[LENGTH_DATA_MAX];
uint32_t freq;
uint16_t data;
uint16_t temp;
uint8_t sys;
uint8_t test = 0x00;
uint8_t ack;
uint8_t temp[16];
void delay(uint16_t nCount);

void main( void )
{
    CLK_DeInit();
    CLK_HSICmd(ENABLE);
    CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV2);
    CLK_SYSCLKConfig(CLK_PRESCALER_CPUDIV1);
    CLK_AdjustHSICalibrationValue(CLK_HSITRIMVALUE_0);
    freq = CLK_GetClockFreq();
    enableInterrupts();
    
    timerInit(0xFFFF);
    i2cInit();
    uartInit();
    bh1750Init();
    timerIntEnable();
    gpioPinMode(GPIO_PORTC, PIN_6|PIN_7, GPIO_OUTPUT);
    gpioPinMode(GPIO_PORTA, PIN_1|PIN_2, GPIO_OUTPUT);
    delay(0xFFFF);
    delay(0xFFFF);
    delay(0xFFFF);
    delay(0xFFFF);
    delay(0xFFFF);
    delay(0xFFFF);
    delay(0xFFFF);
    delay(0xFFFF);
   

    while(1)
    {
        sht1xStart();
        sht1xSendCmd(SHT_CMD_TEMP);
        ack = sht1xCheckACK();
        sht1xWaiting();
        temp = sht1xReadRaw();
    
        data = bh1750Read();
    }

}

void delay(uint16_t nCount)
{
  /* Decrement nCount value */
  while (nCount != 0)
  {
    nCount--;
  }
}

#pragma vector = 15
__interrupt void timerInt()
{
    TIM2_ClearITPendingBit(TIM2_IT_UPDATE );
}



#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  /*
  while (1)
  {
  }
  */
}
#endif